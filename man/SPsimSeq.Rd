% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SPsimSeq.R, R/simulateData.R
\docType{package}
\name{SPsimSeq}
\alias{SPsimSeq}
\alias{SPsimSeq-package}
\title{SPsimSeq package}
\usage{
SPsimSeq(n.sim = 1, s.data, batch = NULL, group = NULL,
  n.genes = 1000, batch.config = 1, group.config = c(0.5, 0.5),
  tot.samples = 150, pDE = 0.2, model.zero.prob = FALSE,
  const = 1e-05, result.format = "SCE", verbose = TRUE,
  seed = 2581988, ...)
}
\arguments{
\item{n.sim}{a numerical value for the number of simulated data to be  generated}

\item{s.data}{a source data (a SingleCellExperiment class object or a matrix/data.frame of counts with genes in 
rows and samples in columns)}

\item{batch}{a vector containg btach indicator for each sample/cell}

\item{group}{a vector containg group indicator for each sample/cell}

\item{n.genes}{a numeric value for the total number of genes to be simulated}

\item{batch.config}{a numerical vector for the marginal fraction of samples in each batch. 
The number of batches to be simulated is equal to the size of the vector.
All values must sum to 1.}

\item{group.config}{a numerical vector for the marginal fraction of samples in each group.
The number of groups to be simulated is equal to the size of the vector. All values must sum to 1.}

\item{tot.samples}{a numerical value for total number of samples to be simulated.}

\item{pDE}{a numeric value between 0 and 1 indicating the fraction of DE genes 
in a single simulated data}

\item{model.zero.prob}{a logical value whether to model the zero probablity separately 
(suitable for single cell data)}

\item{const}{a small constant (>0) to be added to the CPM before log transformation, to avoid  log(0).
default is 1e-5}

\item{result.format}{a character value for the type of format for the output. Choice can  be
'SCE' for SingleCellExperiment class or "list" for a list object that contains the simulated count,
column information abd row information.}

\item{verbose}{a logical value, if TRUE it displays a message about the satatus of the simulation}

\item{seed}{an integer  between 1 and 1e10. It will be used for #set.seed() function}

\item{...}{further arguments passed to or from other methods.}
}
\value{
a list of SingleCellExperiment object each contatining simulated counts (not normalized), 
cell level information in colData, and gene level information in rowData.
}
\description{
Using a specially designed exponential family for density estimation 
it constructs the distribution of gene expression from a given real RNA 
sequencing data (single and bulk). Subsequently, it simulates a new 
dataset from the estimated density. It allows simulation of multiple 
groups and batches with any required sample size and library size.

This function simulates RNA sequencing data given a real RNA-seq data using
semi-parametric density estimation.
}
\details{
This function estimates the density of a given bulk or single cell RNA-seq data 
(passed using \emph{s.data} argument) using a specially designed exponetial family for density
estimation. Afterwards, it simulates a new data set from the estimated density. In a first step, 
the log-CPM outcomes from a given real data  are used for semi-parametrically 
estimating gene-wise distributions. This method is based on a fast log-linear model estimation 
approach developed by Efron et al (1996). Arbitrarily large datasets, with realistically varying 
library sizes, can be sampled from these estimated distributions.

For simulation of single cell RNA-seq data, it involves an additional step to explicitly account for the high 
abundance of zero counts. This step models the probability of zero counts as a function the mean 
expression of the gene and the library size of the cell (both in log scale) to add excess zeros. 
This can be done by using \emph{model.zero.prob=TRUE}. Note that,
for extremly large size data, it is recomended to use a random sample of cells to
reduce computation time. To enable this, add the argument \emph{subset.data=TRUE} and you 
can specify the number of cells to be used using \emph{n.samples} argument. 
For example \emph{n.samples=400}.

Given known groups of samples/cells in the source data, DGE is simulated by independently 
sampling data from distributions constructed in each group. In particular, this procedure is 
applied on a set of genes with fold-change in the source data more than a given threshold (\emph{lfc.thrld}). 
Moreover, when  the source dataset involves samples/cells processed in different batches, our 
simulation procedure incorporates this batch effect in the simulated data, if required. 
Different experimental designs can be simulated using the group and batch configuration arguments to
simulate biologica/experimental conditions and batchs (instrument or subjects), respectively. 
Also, it is important to filter the source data so that gene with suffient expression will be used to 
estimate the density.
}
\examples{
#----------------------------------------------------------------
# Example 1: simulating bulk RNA-seq

\donttest{ # TAKES LONG
# load the Zhang data (availabl with the package)
data("zhang.data") 

# filter genes with sufficient expression (important step to avoid bugs) 
zhang.counts <- zhang.data$counts[rowSums(zhang.data$counts > 0)>=10, ]  
MYCN.status <- zhang.data$MYCN.status+1  

# We simulate only a single data (n.sim = 1) with the following property
# - 2000 genes ( n.genes = 2000) 
# - 180 samples (tot.samples = 180) 
# - the samples are equally divided into 2 groups each with 90 samples 
#   (group.config = c(0.5, 0.5))
# - all samples are from a single batch (batch.config = 1)
# - we add 10\% DE genes (pDE = 0.1) 
# - we do not model the zeroes separately, they are the part of density 
#    estimation (model.zero.prob = FALSE)

sim.data.bulk <- SPsimSeq(n.sim = 1, s.data = zhang.counts, batch = NULL,
                              group = MYCN.status, n.genes = 2000, batch.config = 1,
                              group.config = c(0.5, 0.5), tot.samples = 180, pDE = 0.1,
                              model.zero.prob = FALSE, result.format = "list")
                              
sim.data.bulk1 <- sim.data.bulk[[1]]                              
head(sim.data.bulk1$counts[, 1:5])  # count data
head(sim.data.bulk1$colData)        # sample info
head(sim.data.bulk1$rowData)        # gene info


#----------------------------------------------------------------
# Example 2: simulating single cell RNA-seq from a single batch (read-counts)
# we simulate only a single scRNA-seq data (n.sim = 1) with the following property
# - 2000 genes (n.genes = 2000) 
# - 100 cells (tot.samples = 100) 
# - the cells are equally divided into 2 groups each with 50 cells (group.config = c(0.5, 0.5))
# - all cells are from a single batch (batch.config = 1)
# - we add 10\% DE genes (pDE = 0.1) 
# - we model the zeroes separately (model.zero.prob = TRUE)
# - the ouput will be in SingleCellExperiment class object (result.format = "SCE")


library(SingleCellExperiment)

# load the NGP nutlin data (availabl with the package)
data("scNGP.data")

# filter genes with sufficient expression (important step to avoid bugs) 
scNGP.data2 <- scNGP.data[rowSums(counts(scNGP.data) > 0)>=10, ]  
treatment <- ifelse(scNGP.data2$characteristics..treatment=="nutlin",2,1) 

# simulate data (we simulate here only a single data, n.sim = 1)
sim.data.sc <- SPsimSeq(n.sim = 1, s.data = scNGP.data2, batch = NULL,
                            group = treatment, n.genes = 2000, batch.config = 1,
                            group.config = c(0.5, 0.5), tot.samples = 100, pDE = 0.1,
                            model.zero.prob = TRUE, result.format = "SCE")
                            
sim.data.sc1 <- sim.data.sc[[1]]
class(sim.data.sc1)
head(counts(sim.data.sc1)[, 1:5])
colData(sim.data.sc1)
rowData(sim.data.sc1)



#----------------------------------------------------------------
# Example 3: simulating single cell RNA-seq from a single batch (UMI counts)
# we simulate only a single scRNA-seq data (n.sim = 1) with the following property
# - 2000 genes (n.genes = 2000) 
# - 200 cells (tot.samples = 200) 
# - the cells are from a single experimental group (group.config = 1)
# - all cells are from a single batch (batch.config = 1)
# - we add 0\% DE genes (pDE = 0) 
# - we model the zeroes separately (model.zero.prob = TRUE)
# - since the size of the PBMC data is large, we use the subset of the cells to 
#   fit the zero prob. model (subset.data=TRUE, n.samples=400)
# - the ouput will be in SingleCellExperiment class object (result.format = "SCE") 

library(SingleCellExperiment)

# load the PBMC data (availabl with the package)
data("PBMC.data") 

# filter genes with sufficient expression (important step to avoid bugs) 
PBMCdat2 <- PBMC.10x.data[rowSums(counts(PBMC.10x.data) > 0)>=20, ] 

# simulate data (we simulate here only a single data, n.sim = 1)
sim.data.scUMI <- SPsimSeq(n.sim = 1, s.data = PBMCdat2, batch = NULL,
                               group = NULL, n.genes = 2000, batch.config = 1,
                               group.config = 1, tot.samples = 200, pDE = 0,
                               model.zero.prob = TRUE, result.format = "SCE", 
                               subset.data=TRUE, n.samples=400)
                            
sim.data.scUMI1 <- sim.data.scUMI[[1]]
class(sim.data.scUMI1)
head(counts(sim.data.scUMI1)[, 1:5])
colData(sim.data.scUMI1)
rowData(sim.data.scUMI1)

}


}
\references{
\itemize{
\item Efron, B., & Tibshirani, R. (1996). Using specially designed exponential families for density estimation. \emph{The Annals of Statistics}, 24(6), 2431-2461.
}
}
\author{
Alemu Takele Assefa \email{alemutak@hotmail.com}
}
